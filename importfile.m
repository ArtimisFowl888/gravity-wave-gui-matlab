function test_read = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   C4CENTERBLAUNCHACER114604 = IMPORTFILE(FILENAME) Reads data from text
%   file FILENAME for the default selection.
%
%   C4CENTERBLAUNCHACER114604 = IMPORTFILE(FILENAME, STARTROW, ENDROW)
%   Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   C4CenterBlaunchAcer114604 = importfile('08212017C4_Center_Blaunch_Acer_114604.txt', 21, 4626);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/05/06 11:03:10

%% Initialize variables.
if nargin<=2
startRow = 21;
endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%2s%28s%23s%22s%5s%1s%24s%35s%8s%6s%14s%7s%11s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
frewind(fileID);
dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for col=1:length(dataArray)
dataArray{col} = [dataArray{col};dataArrayBlock{col}];
end
end

%% Remove white space around all cell columns.
dataArray{8} = strtrim(dataArray{8});

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,7,9,10,11,12,13,14]
% Converts text in the input cell array to numbers. Replaced non-numeric
% text with NaN.
rawData = dataArray{col};
for row=1:size(rawData, 1)
% Create a regular expression to detect and remove non-numeric prefixes and
% suffixes.
regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
try
result = regexp(rawData(row), regexstr, 'names');
numbers = result.numbers;

% Detected commas in non-thousand locations.
invalidThousandsSeparator = false;
if numbers.contains(',')
thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
if isempty(regexp(numbers, thousandsRegExp, 'once'))
numbers = NaN;
invalidThousandsSeparator = true;
end
end
% Convert numeric text to numbers.
if ~invalidThousandsSeparator
numbers = textscan(char(strrep(numbers, ',', '')), '%f');
numericData(row, col) = numbers{1};
raw{row, col} = numbers{1};
end
catch
raw{row, col} = rawData{row};
end
end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [1,2,3,4,5,7,9,10,11,12,13,14]);
rawStringColumns = string(raw(:, [6,8]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
idx = (rawStringColumns(:, 1) == "<undefined>");
rawStringColumns(idx, 1) = "";

%% Create output variable
test_read = table;
test_read.Ti = cell2mat(rawNumericColumns(:, 1));
test_read.meP = cell2mat(rawNumericColumns(:, 2));
test_read.T = cell2mat(rawNumericColumns(:, 3));
test_read.Hu = cell2mat(rawNumericColumns(:, 4));
test_read.Ws = cell2mat(rawNumericColumns(:, 5));
test_read.VarName6 = categorical(rawStringColumns(:, 1));
test_read.Wd = cell2mat(rawNumericColumns(:, 6));
test_read.LongLat = rawStringColumns(:, 2);
test_read.Alt = cell2mat(rawNumericColumns(:, 7));
test_read.Geop = cell2mat(rawNumericColumns(:, 8));
test_read.otDew = cell2mat(rawNumericColumns(:, 9));
test_read.pVirt = cell2mat(rawNumericColumns(:, 10));
test_read.TempRs = cell2mat(rawNumericColumns(:, 11));
test_read.D = cell2mat(rawNumericColumns(:, 12));

